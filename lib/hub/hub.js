// Generated by CoffeeScript 1.6.3
var VERSION, engine;

VERSION = 1;

engine = require('engine.io');

module.exports.create = function(config) {
  var local;
  return local = {
    server: void 0,
    clients: {},
    index: {
      uuid2socketid: {}
    },
    status: {
      value: 'pending',
      at: new Date
    },
    timestamp: function() {
      return new Date;
    },
    log: {
      error: function(message, objects) {
        return console.log({
          todo: {
            'log.error': {
              message: message,
              objects: objects
            }
          }
        });
      }
    },
    listen: function() {
      var server;
      local.server = server = engine.listen(config.listen.port);
      return server.on('connection', function(socket) {
        local.clients[socket.id] = {
          status: {
            value: 'connected',
            at: local.timestamp()
          },
          socket: socket
        };
        return socket.on('message', function(payload) {
          var data, event, version, _ref;
          version = payload[0];
          _ref = JSON.parse(payload.slice(1)), event = _ref.event, data = _ref.data;
          return local[event](socket, data);
        });
      });
    },
    handshake: function(socket, data) {
      var client, context, previousClient, previousID, secret, title, uuid;
      secret = data.secret, title = data.title, uuid = data.uuid, context = data.context;
      if (secret !== config.secret) {
        socket.send(VERSION + '{"event":"deny"}', function() {
          return socket.close();
        });
        return;
      }
      try {
        client = local.clients[socket.id];
      } catch (_error) {}
      if (client == null) {
        local.log.error('unknown socket id', {
          socket: socket
        });
        socket.send(VERSION + '{"event":"deny"}', function() {
          return socket.close();
        });
        return;
      }
      if (previousID = local.index.uuid2socketid[uuid]) {
        previousClient = local.clients[previousID];
        client.cache = previousClient.cache;
      }
      client.title = title;
      client.uuid = uuid;
      client.context = context;
      client.status.value = 'authorized';
      client.status.at = local.timestamp();
      local.index.uuid2socketid[uuid] = socket.id;
      return socket.send(VERSION + '{"event":"accept"}');
    },
    close: function() {}
  };
};
