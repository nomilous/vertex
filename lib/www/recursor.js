// Generated by CoffeeScript 1.6.3
var deferred;

deferred = require('also').deferred;

module.exports.create = function(config, log) {
  var local, _base;
  config || (config = {});
  config.api || (config.api = {});
  (_base = config.api).root || (_base.root = {});
  return local = {
    process: deferred(function(action, opts) {
      var path;
      path = opts.path.split('/').filter(function(p) {
        return p.length > 0;
      });
      return local.recurse(opts, path, config.www.root, function(error, result, www) {
        if (error != null) {
          return action.reject(error);
        }
        return action.resolve(result);
      });
    }),
    recurse: function(opts, path, object, callback) {
      var error, run;
      try {
        run = function() {
          var nextKey;
          if (nextKey = path.shift()) {
            if (!(object = object[nextKey])) {
              return callback(null, {
                statusCode: 404
              });
            }
            return local.recurse(opts, path, object, callback);
          } else {
            return callback(null, {
              statusCode: 200,
              body: object
            });
          }
        };
        if (typeof object === 'function') {
          if (!object.$www) {
            return callback(null, {
              statusCode: 404
            });
          }
          opts.rest = path;
          opts.www = object.$www;
          return object(opts, function(error, result) {
            if ((result.body != null) || (result.statusCode != null)) {
              return callback(null, {
                statusCode: result.statusCode || 200,
                body: result.body || '',
                www: object.$www
              });
            }
            object = result;
            return run();
          });
        } else {
          return run();
        }
      } catch (_error) {
        error = _error;
        return callback(error);
      }
    }
  };
};
