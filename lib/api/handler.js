// Generated by CoffeeScript 1.6.3
var Recursor, deferred, lastInstance, parse, pipeline, _ref;

parse = require('querystring').parse;

_ref = require('also'), pipeline = _ref.pipeline, deferred = _ref.deferred;

Recursor = require('./recursor');

lastInstance = void 0;

module.exports._test = function() {
  return lastInstance;
};

module.exports.create = function(config) {
  var api, local;
  lastInstance = local = {
    root: config.root || {},
    recursor: Recursor.create(config),
    prepare: deferred(function(action, opts) {
      return action.resolve();
    }),
    process: function(opts) {
      return local.recursor.process(opts);
    },
    responder: function(opts, res) {
      return local.prepare(opts).then(local.process(opts).then(function(result) {
        var body;
        try {
          body = JSON.stringify(result.body);
        } catch (_error) {}
        result.headers || (result.headers = {});
        result.headers['Content-Type'] = 'application/json';
        result.headers['Content-Length'] = body.length;
        res.writeHead(result.statusCode || 200, result.headers);
        res.write(body || '');
        return res.end();
      }, function(error) {
        res.writeHead(error.statusCode || 500, error.headers || {});
        return res.end(error.body || error.toString());
      }, function(notify) {}));
    },
    handle: function(req, res) {
      var m, path, query, _ref1;
      path = req.url;
      try {
        _ref1 = req.url.match(/^(.*?)\?(.*)/), m = _ref1[0], path = _ref1[1], query = _ref1[2];
      } catch (_error) {}
      if (path === '/' && !config.allowRoot) {
        res.writeHead(404);
        return res.end();
      }
      return local.responder({
        headers: req.headers,
        path: path,
        query: query != null ? parse(query) : {}
      }, res);
    }
  };
  return api = {
    handle: local.handle
  };
};
